
# Generated by CodiumAI

import pytest
from back.sheets.permissions import IsGetRequest
from rest_framework.permissions import IsAuthenticated

from back.sheets.views import SheetsViewSet

class TestGetPermissions:

    # Returns IsGetRequest permission class if action is 'list'
    def test_returns_is_get_request_permission_class_if_action_is_list(self):
        # Arrange
        sheets_view_set = SheetsViewSet()
        sheets_view_set.action = 'list'
    
        # Act
        permissions = sheets_view_set.get_permissions()
    
        # Assert
        assert isinstance(permissions[0], IsGetRequest)

    # Returns IsAuthenticated permission class for all other actions
    def test_returns_is_authenticated_permission_class_for_all_other_actions(self):
        # Arrange
        sheets_view_set = SheetsViewSet()
        sheets_view_set.action = 'create'
    
        # Act
        permissions = sheets_view_set.get_permissions()
    
        # Assert
        assert isinstance(permissions[0], IsAuthenticated)

    # Returns a list of permission objects
    def test_returns_list_of_permission_objects(self):
        # Arrange
        sheets_view_set = SheetsViewSet()
    
        # Act
        permissions = sheets_view_set.get_permissions()
    
        # Assert
        assert isinstance(permissions, list)

    # Raises an exception if action is not defined
    def test_raises_exception_if_action_is_not_defined(self):
        # Arrange
        sheets_view_set = SheetsViewSet()
    
        # Act and Assert
        with pytest.raises(AttributeError):
            sheets_view_set.get_permissions()

    # Raises an exception if permission class is not defined
    def test_raises_exception_if_permission_class_is_not_defined(self):
        # Arrange
        sheets_view_set = SheetsViewSet()
        sheets_view_set.action = 'custom_action'
    
        # Act and Assert
        with pytest.raises(NameError):
            sheets_view_set.get_permissions()

    # Raises an exception if permission object is not callable
    def test_raises_exception_if_permission_object_is_not_callable(self):
        # Arrange
        class InvalidPermission:
            pass
    
        sheets_view_set = SheetsViewSet()
        sheets_view_set.action = 'list'
        sheets_view_set.permission_classes = [InvalidPermission]
    
        # Act and Assert
        with pytest.raises(TypeError):
            sheets_view_set.get_permissions()